

// CASE 0
// print hello world :DD
print('hello world');
/*
 hellohh*/
print('hello world');

//CASE 1, strong typing
Number b = 1.0 + 2.4 * 5;
String hai = "hai";
Object o = null; // objects are less strict.. maybe.. shall see how to integrate classes here..

/*
void ObjetSetText( Object *o , params )
{
    // parse parameters
    // call object
    o->setText( parsedfromparams );
}
*/

/*
// CASE 2 ACCESS var
print('1.0 + 2.4 * 5 = ' + b );

// CASE 3 Function definition
function printHai()
{
    print('hello world');
}

// CASE 4 calling the function
printHai();
*/

/*
 NO function calls without objects
 C++ interfaces, lots of them.. all functions work by taking Object, and dynamic casting
 it to interface, and then calling the fubction.. THIS means shitloads of interface classes.
 BUT it is far more elegant, than anything else..
 */


// print(text:"Hello world");
// moveTo(x=140,y=200);
// moveTo(x:140 y:200);
// function moveTo( var x , var y );
// function moveTo( var x[type:number] , var y[type:number] );

on(player.forward)
{
    player.walk(true);
}

off(player.forward)
{
    player.walk(false);
}

I want to move the objects, easily, I want to get the specific object from the scene, and move it

var ok = 1.0;
[base, position].where(base.Name == "pallo").all()
{
    position.move( ok , 0.0 , 0.0 );
}

/*
 print(text:"Hello World");                          // internal or external print function call
 function doStuff( var text , var other )            // introduce function
 {
 var cppObject = new CPPObject( text: text );    // create c++ object
 cppObject.doSomething( text:other );            // call c++ function
 cppObject.setPosition(x:10 , y:20);             // call c++ function
 scene.add(object:cppObject);                    // call c++ function, add object to scene
 }
 
 // we want to introduce custom behavior to objects, through scripting
 // to replace the "brains" of entities..
 // functions should be assignable to variables..
 make mockup use of the language, explore all avenues, USE IT. Create realistic use cases
 and make the codes ase "tests".. after that, implement the language.
 
 */